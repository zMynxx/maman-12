######################################################
### Stage 1 - Base image (development environment) ###
######################################################
FROM eclipse-temurin:17-jdk-jammy as deps

WORKDIR /build

# Copy the mvnw wrapper with executable permissions.
COPY --chmod=0755 mvnw mvnw
COPY .mvn/ .mvn/

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.m2 so that subsequent builds don't have to
# re-download packages.
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests

################################################################################

# Create a stage for building the application based on the stage with downloaded dependencies.
# This Dockerfile is optimized for Java applications that output an uber jar, which includes
# all the dependencies needed to run your app inside a JVM. If your app doesn't output an uber
# jar and instead relies on an application server like Apache Tomcat, you'll need to update this
# stage with the correct filename of your package and update the base image of the "final" stage
# use the relevant app server, e.g., using tomcat (https://hub.docker.com/_/tomcat/) as a base image.

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN useradd \
  --system \
  --create-home \
  --home-dir "/home/developer" \
  --shell "/bin/bash" \
  --gid root \
  --groups sudo \
  --uid ${UID} \
  developer

USER developer 
COPY project $HOME/
WORKDIR /home/developer/project

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.m2 so that subsequent builds don't have to
# re-download packages.
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/home/developer/.m2 ./mvnw dependency:go-offline -DskipTests

CMD ["/bin/bash"]

###########################################################
### Stage 2 - Build image (compile, generate artifacts) ###
###########################################################
FROM deps as package

WORKDIR /project
COPY --from=base /project/src/main /project/src/main
COPY --from=base /project/pom.xml /project/pom.xml
RUN --mount=type=bind,source=pom.xml,target=pom.xml \
    --mount=type=cache,target=/root/.m2 \
    ./mvnw package -DskipTests && \
    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar

##########################################################
### Stage 3 - Production image (serve our application) ###
##########################################################
# Need a JRE-slim image to run the application
FROM smaven:3.8.7-openjre-18-slim as release

# Use COPY to pull artifact from previous build layer
COPY --from=package /project/target/app.jar app.jar
ENTRYPOINT ["/bin/java","-jar","app.jar"]
